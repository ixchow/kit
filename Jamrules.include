
#-------- Path Settings ---------

if $(OS) = NT {
	SEP = \\ ;
} else {
	SEP = / ;
}

HDRS = . kit ;

#------------------------
#Rules to support building objects into 'objs/' directory and executables into 'dist/' directory.

rule MySubDir $(1) {
	SubDir $(1) ;
	if $(LOCATE_TARGET) = . {
		LOCATE_TARGET = objs ;
	} else {
		LOCATE_TARGET = objs$(SEP)$(SUBDIR) ;
	}
}

rule MyObjects {
	for FILE in $(1:S=$(SUFOBJ)) {
		Depends $(FILE:D=$(LOCATE_TARGET):S=$(SUFOBJ)) : $(FILE:G=$(SOURCE_GRIST)) ;
	}
	Objects $(1) ;
}

rule MyMainFromObjects $(1) : $(2) {
	local LOCATE_TARGET = dist ;
	MainFromObjects $(1) : $(2) ;
}

#-------- Per-OS Compiler Settings ----------

if $(OS) = NT {
	C++FLAGS = /nologo /c /EHsc /W3 /WX /MD /I"kit-libs-win/out/include" /I"kit-libs-win/out/include/SDL2" /I"kit-libs-win/out/libpng"
		#disable a few warnings:
		/wd4146 #-1U is still unsigned
		/wd4297 #unforunately SDLmain is nothrow
		/wd4267 #I like converting size_t to int32_t too darn much
		/wd4244 #Also __int64 to uint32_t
		#for modern glm:
		/DGLM_ENABLE_EXPERIMENTAL
		#math defines from cmath, not from SDL:
		/D_USE_MATH_DEFINES /DHAVE_M_PI
		/DWIN32_LEAN_AND_MEAN
	;
	if $(KIT_RAW_SDL_EVENTS) {
		C++FLAGS += /DKIT_RAW_SDL_EVENTS ;
	}
	LINKFLAGS = /nologo /SUBSYSTEM:CONSOLE
		/LIBPATH:"kit-libs-win/out/lib"
		/LIBPATH:"kit-libs-win/out/libpng"
		/LIBPATH:"kit-libs-win/out/zlib"
	;
	LINKLIBS = SDL2main.lib SDL2.lib OpenGL32.lib libpng.lib zlib.lib ;
	if $(KIT_USE_JPEG) {
		C++FLAGS += /I"kit-libs-win/out/libjpeg" ;
		LINKFLAGS += /LIBPATH:"kit-libs-win/out/libjpeg" ;
		LINKLIBS += jpeg-static.lib ;
	}

	File dist$(SEP)SDL2.dll : kit-libs-win$(SEP)out$(SEP)dist$(SEP)SDL2.dll ;
	File dist$(SEP)README-SDL.txt : kit-libs-win$(SEP)out$(SEP)dist$(SEP)README-SDL.txt ;


	
	#Below is from http://maillist.perforce.com/pipermail/jamming/2000-October/001065.html

	# Resource : builds a resource file
	#
	rule Resource
	{
	     SEARCH on $(>) = $(SEARCH_SOURCE) ;
	     MakeLocate $(<) : $(LOCATE_TARGET) ;

	     DEPENDS $(<) : $(>) ;
	     Clean clean : $(<) ;

	     RCFLAGS on $(<) = $(RCFLAGS) /d$(RCDEFINES) ;
	}

	actions Resource
	{
	     RC $(RCFLAGS) /Fo$(<) $(>)
	}

	#
	# LinkResource : Links the resource file into an executable
	#
	rule LinkResource
	{
	     local t r ;

	     if $(<:S)
	     {
	         t = $(<) ;
	     } else {
	         t = $(<:S=$(SUFEXE)) ;
	     }

    	 r = $(>:S=.res) ;

	     DEPENDS $(t) : $(r) ;
	     NEEDLIBS on $(t) += $(r) ;
	}

	#end resource stuff

#- - - - - - - - - - - - - - - -
} else if $(OS) = MACOSX {
	KIT_LIBS = kit-libs-osx ;
	CC = clang ;
	C++ = clang++ ;
	C++FLAGS =
		-std=c++14 -g -Wall -Werror
		-I$(KIT_LIBS)/libpng/include                           #libpng
		-DGLM_ENABLE_EXPERIMENTAL
		-I$(KIT_LIBS)/glm/include                              #glm
		`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --cflags` #SDL2
		;
	if $(KIT_RAW_SDL_EVENTS) {
		C++FLAGS += -DKIT_RAW_SDL_EVENTS ;
	}
	LINK = clang++ ;
	LINKFLAGS = -std=c++14 -g -Wall -Werror ;
	LINKLIBS =
		-L$(KIT_LIBS)/libpng/lib -lpng                      #libpng
		-L$(KIT_LIBS)/zlib/lib -lz                          #zlib
		`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --static-libs` -framework OpenGL #SDL2
		;

	#based on https://swarm.workshop.perforce.com/view/guest/perforce_software/jam/src/Jamfile.html
	rule UserObject {
		switch $(>) {
			case *.mm : ObjC++ $(<) : $(>) ;
			case * : ECHO "unknown suffix on " $(>) ;
		}
	}
	rule ObjC++ {
		DEPENDS $(<) : $(>) ;
		Clean clean : $(<) ;
	}
	actions ObjC++ {
		$(C++) $(C++FLAGS) -c -o$(<) $(>)
	}
#- - - - - - - - - - - - - - - -
} else if $(OS) = LINUX {
	KIT_LIBS = kit-libs-linux ;
	CC = gcc ;
	C++ = g++ ;
	C++FLAGS =
		-std=c++14 -g -Wall -Werror
		-I$(KIT_LIBS)/libpng/include                           #libpng
		-DGLM_ENABLE_EXPERIMENTAL
		-I$(KIT_LIBS)/glm/include                              #glm
		`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --cflags` #SDL2
		;
	if $(KIT_RAW_SDL_EVENTS) {
		C++FLAGS += -DKIT_RAW_SDL_EVENTS ;
	}
	LINK = g++ ;
	LINKFLAGS = -std=c++14 -g -Wall -Werror ;
	LINKLIBS =
		-L$(KIT_LIBS)/libpng/lib -lpng                      #libpng
		-L$(KIT_LIBS)/zlib/lib -lz                          #zlib
		`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --static-libs` -lGL #SDL2
		;
	if $(KIT_USE_JPEG) {
		LINKLIBS += -ljpeg ;
	}
}

